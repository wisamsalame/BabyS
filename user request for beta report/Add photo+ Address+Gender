////The user's request is to add a photo to any babysitter / address / gender. I attach the code I added to the existing code

    ImageView theImageButton;
    RadioButton rb_Male , rb_female;
    private Uri filePath;
    private Uri imageurl;
    private String imageurlString;
    
     address = intent.getStringExtra("Address");
        ifhisMale = intent.getBooleanExtra("IfhisMale", false);
        imageurlString = intent.getStringExtra("imageurl");

        rb_Male = (RadioButton)findViewById(R.id.radioM);
        rb_female = (RadioButton)findViewById(R.id.radioF);
        if(ifhisMale){
            rb_Male.setChecked(true);
            rb_female.setChecked(false);
        }else{
            rb_Male.setChecked(false);
            rb_female.setChecked(true);
        }
        
        theImageButton.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {

        chooseImage();

    }
});
 
  private void fileChooser() {
        Intent intent = new Intent();
        intent.setType("image/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(intent,0);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(requestCode == PICK_IMAGE_REQUEST && resultCode == RESULT_OK
                && data != null && data.getData() != null )
        {
            filePath = data.getData();
            try {
                Bitmap bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), filePath);
                theImageButton.setImageBitmap(bitmap);
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }
    }
    private void chooseImage() {
        Intent intent = new Intent();
        intent.setType("image/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(Intent.createChooser(intent, "Select Picture"), PICK_IMAGE_REQUEST);
    }


@Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btn_Edit:

                int selectedId = radioGroup.getCheckedRadioButtonId();
                radioButton = (RadioButton) findViewById(selectedId);
                if(radioButton.getText().equals("Male")){
                    ifhisMale=true;
                }else{
                    ifhisMale=false;
                }
                                address = et_address.getText().toString();

private void uploadImage() {

        if(filePath != null)
        {
            final ProgressDialog progressDialog = new ProgressDialog(this);
            progressDialog.setTitle("Uploading...");
            progressDialog.show();

            final StorageReference ref = storageReference.child("images/"+ ID);
            ref.putFile(filePath)
                    .addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                        @Override
                        public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                            getDownloadURL(ref);
                            progressDialog.dismiss();
                            Log.d("filepath",filePath+"");
                            Toast.makeText(editProfileBS.this, "Uploaded", Toast.LENGTH_SHORT).show();
                        }
                    })
                    .addOnFailureListener(new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            progressDialog.dismiss();
                            Toast.makeText(editProfileBS.this, "Failed "+e.getMessage(), Toast.LENGTH_SHORT).show();
                        }
                    })
                    .addOnProgressListener(new OnProgressListener<UploadTask.TaskSnapshot>() {
                        @Override
                        public void onProgress(UploadTask.TaskSnapshot taskSnapshot) {
                            double progress = (100.0*taskSnapshot.getBytesTransferred()/taskSnapshot
                                    .getTotalByteCount());
                            progressDialog.setMessage("Uploaded "+(int)progress+"%");
                        }
                    });
        }
    }

    private void getDownloadURL(StorageReference ref) {
        ref.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
            @Override
            public void onSuccess(Uri uri) {
                FirebaseDatabase database = FirebaseDatabase.getInstance();
                DatabaseReference myRef = database.getReference();
                myRef.child("Users").child(ID).child("imageURL").setValue(uri.toString());
                Log.d("URI" , uri.toString() + "");
                Log.d("ID" , ID + "");
            }
        });
    }
    
      @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

    }

    static class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
        ImageView bmImage;

        public DownloadImageTask(ImageView bmImage) {
            this.bmImage = bmImage;
        }

        protected Bitmap doInBackground(String... urls) {
            String urldisplay = urls[0];
            Bitmap mIcon11 = null;
            try {
                InputStream in = new java.net.URL(urldisplay).openStream();
                mIcon11 = BitmapFactory.decodeStream(in);
            } catch (Exception e) {
                Log.e("Error", e.getMessage());
                e.printStackTrace();
            }
            return mIcon11;
        }

        protected void onPostExecute(Bitmap result) {
            bmImage.setImageBitmap(result);
        }
    }
